// Generated by gencpp from file sensors_pkg/Gps.msg
// DO NOT EDIT!


#ifndef SENSORS_PKG_MESSAGE_GPS_H
#define SENSORS_PKG_MESSAGE_GPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensors_pkg
{
template <class ContainerAllocator>
struct Gps_
{
  typedef Gps_<ContainerAllocator> Type;

  Gps_()
    : long(0.0)
    , lat(0.0)  {
    }
  Gps_(const ContainerAllocator& _alloc)
    : long(0.0)
    , lat(0.0)  {
  (void)_alloc;
    }



   typedef float _long_type;
  _long_type long;

   typedef float _lat_type;
  _lat_type lat;





  typedef boost::shared_ptr< ::sensors_pkg::Gps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensors_pkg::Gps_<ContainerAllocator> const> ConstPtr;

}; // struct Gps_

typedef ::sensors_pkg::Gps_<std::allocator<void> > Gps;

typedef boost::shared_ptr< ::sensors_pkg::Gps > GpsPtr;
typedef boost::shared_ptr< ::sensors_pkg::Gps const> GpsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensors_pkg::Gps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensors_pkg::Gps_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sensors_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensors_pkg': ['/home/pi/catkin_gp/src/sensors_pkg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sensors_pkg::Gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensors_pkg::Gps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensors_pkg::Gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensors_pkg::Gps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensors_pkg::Gps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensors_pkg::Gps_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensors_pkg::Gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7abaaee080310abc2b3b4a45bd04059e";
  }

  static const char* value(const ::sensors_pkg::Gps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7abaaee080310abcULL;
  static const uint64_t static_value2 = 0x2b3b4a45bd04059eULL;
};

template<class ContainerAllocator>
struct DataType< ::sensors_pkg::Gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensors_pkg/Gps";
  }

  static const char* value(const ::sensors_pkg::Gps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensors_pkg::Gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 long\n\
float32 lat\n\
";
  }

  static const char* value(const ::sensors_pkg::Gps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensors_pkg::Gps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.long);
      stream.next(m.lat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensors_pkg::Gps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensors_pkg::Gps_<ContainerAllocator>& v)
  {
    s << indent << "long: ";
    Printer<float>::stream(s, indent + "  ", v.long);
    s << indent << "lat: ";
    Printer<float>::stream(s, indent + "  ", v.lat);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSORS_PKG_MESSAGE_GPS_H
